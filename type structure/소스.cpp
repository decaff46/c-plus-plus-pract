#include <iostream>
using namespace std;

/*
	C++ 1사이클 끝

		이후의 공부

			1.	심화 문법(람다, 스마트포인터... 등등)
			2.	자료구조와 STL( 표준 템플릿 라이브러리 )
			3.	디자인패턴( 클래스 설계 방법론 )

			자료구조, 디자인패턴, 심화 문법

			자료구조 :	포인터, 클래스, 구조설계력
						구조구현으로 프로그래밍 완성
						구현원리

			STL		:	자료구조를 사용하는 방법
						표준에서 지원하는 인터페이스에 대한 실습

			
				자료구조			STL

	문자열		MyString		string
	동적배열		MyVector		vector


	자료구조

		정보를 저장하고, 관리하는 구조 설계

		-선형자료구조		:	구현 쉬운편

			스택,		:	구현이 쉽다.		LIFO( 후입선출 ) 박스
			큐,			:						FIFO( 선입선출 )	빨대
			덱,			:	양방 삽입삭제
			------------------------------------------------------
			내부 정보를 확인할 수 없다.


			선형리스트,	Vector, 동적배열
			
			*********
			연결리스트	:	내부구조는 비선형구조이나, 
			*********		정보가 선형을 이루는 자료구조
			포인터 활용....

			특징 :	구현 자체는 30분이내 가능, 템플릿, 포인트이해, 클래스
					포인터, 클래스, 템플릿에 대한 이해도			

		-비선형자료구조	:	효율성이 높다.

			트리, 그래프


		------------------------------------------------------

		연결리스트

			- 노드라는 정보의 단위를 기준으로한다.

			
			선형리스트 [정보 == 원소]
			연결리스트 [정보 != 원소], [노드 == 원소]

			strcut Node
			{
				T	data;

				Node *next;	//	다음노드 위치
				Node *prev;	//	이전노드 위치
			}

			Node	*pArray;

			- 노드는 물리적으로 연결되어있지 않다.( 포인터를 통한 논리적연결 )

			- 연결리스트 종류( single, double, <circle> )
			- 헤더(single, double), 테일( double )


			class DoubleLinkedList
			{
				Node	Head;
				Node	Tail;

				//	맨앞 삽입
				void	Push_Front(....
			};

			선형리스트		vs		연결리스트

			 임의접근([])				  데이터의 삽입삭제 new, delete				


			연결리스트 활용 : 순회 데이터, <잦은 삽입삭제>

			자료구조의 심볼 : 무엇이 정답이다 (X), 어떤것이 더 효율적이다.


			양방향연결리스트에서 필요한 인터페이스 함수

			맨앞 삽입
			맨뒤 삽입(push_back)

			맨앞 삭제
			맨뒤 삭제(pop_back)

			선택 앞 삽입
			선택 뒤 삽입
			
			선택 삭제
			선택 앞 삭제
			선택 뒤 삭제
			모두 삭제

			데이터보기(output)
			///////////////////////////////////////
			1. int 데이터 인 것으로. 먼저 구현해볼것

			struct Node
			{
				int data;

				Node *Next;
				Node *Prev;
			};

			2. 템플릿
*/



int main()
{
	return 0;
}